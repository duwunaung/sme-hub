<%- include('../partials/superadmin/header.ejs') %>
<%- include('../partials/superadmin/navbar.ejs') %>
		<style>
		    @media (max-width: 768px) {
		        .content h2 {
		            font-size: 1.5rem;
		        }
		        .card-title {
		            font-size: 1rem;
		        }
		    }

		    .chart-container {
		        position: relative;
		        margin: auto;
		        height: 250px;
		        width: 100%;
		    }

		    @media (max-width: 576px) {
		        .chart-container {
		            height: 200px;
		        }
		        .card {
		            margin-bottom: 1rem;
		        }
		    }

		    /* Counter Cards */
		    .counter-card {
		        transition: transform 0.3s ease;
		    }

		    .counter-card:hover {
		        transform: scale(1.05);
		    }

		    .row > [class*='col-'] {
		        margin-bottom: 1rem;
		    }
            
            /* Error message styling */
            .chart-error {
                display: flex;
                align-items: center;
                justify-content: center;
                height: 100%;
                color: #dc3545;
                text-align: center;
                padding: 20px;
            }
            
            .data-loading {
                display: flex;
                height: 100%;
                align-items: center;
                justify-content: center;
                color: #6c757d;
            }
            
            /* No data message */
            .no-data-message {
                display: flex;
                height: 100%;
                align-items: center;
                justify-content: center;
                color: #6c757d;
                text-align: center;
            }
		</style>

		<div class="content container-fluid">
		    <h2 class="text-center mb-4">Welcome to the Dashboard</h2>
		  
		    <!-- Counter Cards Row -->
		    <div class="row">
		        <div class="col-sm-6 col-md-6 col-lg-6">
		            <div class="card text-center shadow-sm counter-card">
		                <div class="card-body">
		                    <h5 class="card-title">Total Organizations</h5>
		                    <h2 id="totalOrganizations" class="text-primary">-</h2>
		                </div>
		            </div>
		        </div>
		        <div class="col-sm-6 col-md-6 col-lg-6">
		            <div class="card text-center shadow-sm counter-card">
		                <div class="card-body">
		                    <h5 class="card-title">Total Users</h5>
		                    <h2 id="totalUsers" class="text-primary">-</h2>
		                </div>
		            </div>
		        </div>
		    </div>
		  
		    <!-- Charts Row 1 -->
		    <div class="row mt-4">
		        <div class="col-12 col-md-6 col-lg-4">
		            <div class="card shadow-sm h-100">
		                <div class="card-body">
		                    <h5 class="card-title">New Organizations (Monthly)</h5>
		                    <div id="newOrgsChartContainer" class="chart-container">
		                        <canvas id="newOrgsChart"></canvas>
		                    </div>
		                </div>
		            </div>
		        </div>
		        <div class="col-12 col-md-6 col-lg-4">
		            <div class="card shadow-sm h-100">
		                <div class="card-body">
		                    <h5 class="card-title">Inactive Organizations (Monthly)</h5>
		                    <div id="terminatedOrgsChartContainer" class="chart-container">
		                        <canvas id="terminatedOrgsChart"></canvas>
		                    </div>
		                </div>
		            </div>
		        </div>
		        <div class="col-12 col-md-12 col-lg-4">
		            <div class="card shadow-sm h-100">
		                <div class="card-body">
		                    <h5 class="card-title">Organizations by Country</h5>
		                    <div id="orgsByCountryChartContainer" class="chart-container">
		                        <canvas id="orgsByCountryChart"></canvas>
		                    </div>
		                </div>
		            </div>
		        </div>
		    </div>
		  
		    <!-- Charts Row 2 -->
		    <div class="row mt-4">
		        <div class="col-12 col-md-6">
		            <div class="card shadow-sm h-100">
		                <div class="card-body">
		                    <h5 class="card-title">Last 7 Days Transactions</h5>
		                    <div id="weeklyTransactionsChartContainer" class="chart-container">
		                        <canvas id="weeklyTransactionsChart"></canvas>
		                    </div>
		                </div>
		            </div>
		        </div>
		        <div class="col-12 col-md-6">
		            <div class="card shadow-sm h-100">
		                <div class="card-body">
		                    <h5 class="card-title">Last 6 Months Transactions</h5>
		                    <div id="monthlyTransactionsChartContainer" class="chart-container">
		                        <canvas id="monthlyTransactionsChart"></canvas>
		                    </div>
		                </div>
		            </div>
		        </div>
		    </div>
		</div>				
	</main>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		Chart.defaults.responsive = true;
		Chart.defaults.maintainAspectRatio = false;
        
        function safeGetData(dataObject, path, defaultValue = []) {
            try {
                const parts = path.split('.');
                let result = dataObject;
                
                for (const part of parts) {
                    if (result === null || result === undefined || typeof result !== 'object') {
                        return defaultValue;
                    }
                    result = result[part];
                }
                
                return result || defaultValue;
            } catch (error) {
                console.error(`Error accessing data path ${path}:`, error);
                return defaultValue;
            }
        }
        
        function safeJsonParse(jsonString, defaultValue = []) {
            try {
                if (!jsonString || typeof jsonString !== 'string') {
                    return defaultValue;
                }
                return JSON.parse(jsonString);
            } catch (error) {
                console.error("Error parsing JSON:", error);
                return defaultValue;
            }
        }
        
        // Function to show error message in chart container
        function showChartError(containerId, message = "Unable to load chart data") {
            const container = document.getElementById(containerId);
            if (container) {
                const canvas = container.querySelector('canvas');
                if (canvas) {
                    canvas.style.display = 'none';
                }
                
                const errorDiv = document.createElement('div');
                errorDiv.className = 'chart-error';
                errorDiv.innerHTML = `<p><i class="fas fa-exclamation-triangle mr-2"></i> ${message}</p>`;
                container.appendChild(errorDiv);
            }
        }
        
        // Function to show "No data available" message
        function showNoDataMessage(containerId, message = "No data available") {
            const container = document.getElementById(containerId);
            if (container) {
                const canvas = container.querySelector('canvas');
                if (canvas) {
                    canvas.style.display = 'none';
                }
                
                const noDataDiv = document.createElement('div');
                noDataDiv.className = 'no-data-message';
                noDataDiv.innerHTML = `<p>${message}</p>`;
                container.appendChild(noDataDiv);
            }
        }
        
		function animateCounter(elementId, finalValue, baseDuration = 1000) {
		  const element = document.getElementById(elementId);
		  if (!element) return;
          
          // Validate finalValue is a number
          if (isNaN(finalValue) || finalValue === null || finalValue === undefined) {
            element.textContent = "N/A";
            return;
          }
          
          // Ensure finalValue is a number
          finalValue = parseInt(finalValue, 10) || 0;
          
		  const numDigits = Math.floor(Math.log10(Math.max(1, finalValue))) + 1;
		  let duration;
		  if (numDigits <= 1) {
		    duration = baseDuration;
		  } else if (numDigits === 2) {
		    duration = baseDuration * 1.5;
		  } else if (numDigits === 3) {
		    duration = baseDuration * 2;
		  } else {
		    duration = baseDuration * 2.5;
		  }
		  let startValue = 0;
		  const increment = finalValue / (duration / 16);
		  let currentValue = startValue;
		  const counter = setInterval(function() {
		    currentValue += increment;
		    if (currentValue >= finalValue) {
		      element.textContent = finalValue.toLocaleString();
		      clearInterval(counter);
		    } else {
		      element.textContent = Math.floor(currentValue).toLocaleString();
		    }
		  }, 16);
		}

		function initCharts() {
            try {
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                const currentMonth = new Date().getMonth();
                
                const lastSixMonths = [];
                for (let i = 5; i >= 0; i--) {
                    const monthIndex = (currentMonth - i + 12) % 12;
                    lastSixMonths.push(months[monthIndex]);
                }
                
                let data;
                try {
                    data = <%- typeof data !== 'undefined' ? JSON.stringify(data) : '{}' %>;
                } catch (e) {
                    console.error("Error accessing data from template:", e);
                    data = {};
                }
                
                // Initialize New Organizations Chart
                initNewOrganizationsChart(data, lastSixMonths, currentMonth);
                
                // Initialize Expired Organizations Chart
                initExpiredOrganizationsChart(data, lastSixMonths, currentMonth);
                
                // Initialize Weekly Transactions Chart
                initWeeklyTransactionsChart(data);
                
                // Initialize Monthly Transactions Chart
                initMonthlyTransactionsChart(data, lastSixMonths);
                
                // Initialize Organizations by Country Chart
                initOrgsByCountryChart(data);
                
            } catch (error) {
                console.error("Error initializing charts:", error);
            }
        }
        
        function initNewOrganizationsChart(data, lastSixMonths, currentMonth) {
            try {
                const container = document.getElementById('newOrgsChartContainer');
                const canvas = document.getElementById('newOrgsChart');
                
                if (!container || !canvas) {
                    console.error("New Organizations chart container or canvas not found");
                    return;
                }
                
                let newOrganizationsData;
                try {
                    newOrganizationsData = safeJsonParse("<%- typeof data !== 'undefined' && data.new_organizations ? JSON.stringify(data.new_organizations.map(item => item.new_organizations)) : '[]' %>", []);
                } catch (e) {
                    console.error("Error parsing new organizations data:", e);
                    showChartError('newOrgsChartContainer', "Error loading new organizations data");
                    return;
                }
                
                // Check if data is empty
                if (!newOrganizationsData || newOrganizationsData.length === 0) {
                    showNoDataMessage('newOrgsChartContainer');
                    return;
                }
                
                const newOrgData = [...newOrganizationsData].reverse();
                const reorderedNewOrgs = [];
                
                // Safely reorder the data for the last 6 months
                try {
                    for (let i = 0; i < 6; i++) {
                        const dataIndex = (currentMonth - 4 + i + 12) % 12;
                        const monthNum = dataIndex === 0 ? 12 : dataIndex;
                        
                        // Check if data exists at index
                        if (monthNum > 0 && monthNum <= newOrgData.length) {
                            reorderedNewOrgs.push(newOrgData[monthNum - 1]);
                        } else {
                            reorderedNewOrgs.push(0); // Default value if data is missing
                        }
                    }
                } catch (e) {
                    console.error("Error reordering new organizations data:", e);
                    reorderedNewOrgs.push(...Array(6).fill(0)); // Fill with zeros if reordering fails
                }
                
                // Create chart
                new Chart(canvas.getContext('2d'), {
                    type: 'bar',
                    data: {
                        labels: lastSixMonths,
                        datasets: [{
                            label: 'New Organizations',
                            data: reorderedNewOrgs,
                            backgroundColor: 'rgba(54, 162, 235, 0.7)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Error creating new organizations chart:", error);
                showChartError('newOrgsChartContainer');
            }
        }
        
        function initExpiredOrganizationsChart(data, lastSixMonths, currentMonth) {
            try {
                const container = document.getElementById('terminatedOrgsChartContainer');
                const canvas = document.getElementById('terminatedOrgsChart');
                
                if (!container || !canvas) {
                    console.error("Terminated Organizations chart container or canvas not found");
                    return;
                }
                
                let expiredOrganizationsData;
                try {
                    expiredOrganizationsData = safeJsonParse("<%- typeof data !== 'undefined' && data.expired_organizations ? JSON.stringify(data.expired_organizations.map(item => item.expired_organizations)) : '[]' %>", []);
                } catch (e) {
                    console.error("Error parsing expired organizations data:", e);
                    showChartError('terminatedOrgsChartContainer', "Error loading inactive organizations data");
                    return;
                }
                
                // Check if data is empty
                if (!expiredOrganizationsData || expiredOrganizationsData.length === 0) {
                    showNoDataMessage('terminatedOrgsChartContainer');
                    return;
                }
                
                const expiredOrgData = [...expiredOrganizationsData].reverse();
                const reorderedExpiredOrgs = [];
                
                // Safely reorder the data for the last 6 months
                try {
                    for (let i = 0; i < 6; i++) {
                        const dataIndex = (currentMonth - 4 + i + 12) % 12;
                        const monthNum = dataIndex === 0 ? 12 : dataIndex;
                        
                        // Check if data exists at index
                        if (monthNum > 0 && monthNum <= expiredOrgData.length) {
                            reorderedExpiredOrgs.push(expiredOrgData[monthNum - 1]);
                        } else {
                            reorderedExpiredOrgs.push(0); // Default value if data is missing
                        }
                    }
                } catch (e) {
                    console.error("Error reordering expired organizations data:", e);
                    reorderedExpiredOrgs.push(...Array(6).fill(0)); // Fill with zeros if reordering fails
                }
                
                // Create chart
                new Chart(canvas.getContext('2d'), {
                    type: 'bar',
                    data: {
                        labels: lastSixMonths,
                        datasets: [{
                            label: 'Inactive Organizations',
                            data: reorderedExpiredOrgs,
                            backgroundColor: 'rgba(255, 99, 132, 0.7)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Error creating expired organizations chart:", error);
                showChartError('terminatedOrgsChartContainer');
            }
        }
        
        function initWeeklyTransactionsChart(data) {
            try {
                const container = document.getElementById('weeklyTransactionsChartContainer');
                const canvas = document.getElementById('weeklyTransactionsChart');
                
                if (!container || !canvas) {
                    console.error("Weekly Transactions chart container or canvas not found");
                    return;
                }
                
                let sevenDayTrans;
                try {
                    sevenDayTrans = safeJsonParse("<%- typeof data !== 'undefined' && data.seven_day_transactions ? JSON.stringify(data.seven_day_transactions.map(item => item.total_count)) : '[]' %>", []);
                } catch (e) {
                    console.error("Error parsing seven day transactions data:", e);
                    showChartError('weeklyTransactionsChartContainer', "Error loading weekly transactions data");
                    return;
                }
                
                // Check if data is empty
                if (!sevenDayTrans || sevenDayTrans.length === 0) {
                    showNoDataMessage('weeklyTransactionsChartContainer');
                    return;
                }
                
                // Generate weekday labels
                const weekDays = [];
                const today = new Date();
                for (let i = 6; i >= 0; i--) {
                    const date = new Date(today);
                    date.setDate(today.getDate() - i);
                    weekDays.push(date.toLocaleDateString('en-US', { weekday: 'short' }));
                }
                
                // Ensure we have 7 data points (padding with zeros if necessary)
                const safeData = sevenDayTrans.length === 7 ? sevenDayTrans : 
                                [...sevenDayTrans, ...Array(7 - (sevenDayTrans.length || 0)).fill(0)].slice(0, 7);
                
                // Create chart
                new Chart(canvas.getContext('2d'), {
                    type: 'bar',
                    data: {
                        labels: weekDays,
                        datasets: [{
                            label: 'Transactions per Day',
                            data: safeData,
                            backgroundColor: 'rgba(75, 192, 192, 0.7)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Error creating weekly transactions chart:", error);
                showChartError('weeklyTransactionsChartContainer');
            }
        }
        
        function initMonthlyTransactionsChart(data, lastSixMonths) {
            try {
                const container = document.getElementById('monthlyTransactionsChartContainer');
                const canvas = document.getElementById('monthlyTransactionsChart');
                
                if (!container || !canvas) {
                    console.error("Monthly Transactions chart container or canvas not found");
                    return;
                }
                
                let sixMonthTrans;
                try {
                    sixMonthTrans = safeJsonParse("<%- typeof data !== 'undefined' && data.six_month_transactions ? JSON.stringify(data.six_month_transactions.map(item => item.total_count)) : '[]' %>", []);
                } catch (e) {
                    console.error("Error parsing six month transactions data:", e);
                    showChartError('monthlyTransactionsChartContainer', "Error loading monthly transactions data");
                    return;
                }
                
                // Check if data is empty
                if (!sixMonthTrans || sixMonthTrans.length === 0) {
                    showNoDataMessage('monthlyTransactionsChartContainer');
                    return;
                }
                
                // Ensure we have 6 data points (padding with zeros if necessary)
                const safeData = sixMonthTrans.length === 6 ? sixMonthTrans : 
                                [...sixMonthTrans, ...Array(6 - (sixMonthTrans.length || 0)).fill(0)].slice(0, 6);
                
                // Create chart
                new Chart(canvas.getContext('2d'), {
                    type: 'bar',
                    data: {
                        labels: lastSixMonths,
                        datasets: [{
                            label: 'Transactions per Month',
                            data: safeData,
                            backgroundColor: 'rgba(153, 102, 255, 0.7)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Error creating monthly transactions chart:", error);
                showChartError('monthlyTransactionsChartContainer');
            }
        }
        
        function initOrgsByCountryChart(data) {
            try {
                const container = document.getElementById('orgsByCountryChartContainer');
                const canvas = document.getElementById('orgsByCountryChart');
                
                if (!container || !canvas) {
                    console.error("Organizations by Country chart container or canvas not found");
                    return;
                }
                
                // Safely get country data
                let countries = [];
                try {
                    countries = <%- typeof data !== 'undefined' && data.org_by_country ? JSON.stringify(data.org_by_country.map(item => item.baseCountry)) : '[]' %>;
                } catch (e) {
                    console.error("Error accessing country data:", e);
                    countries = [];
                }
                
                // Safely get organization count data
                let orgCounts = [];
                try {
                    orgCounts = safeJsonParse("<%- typeof data !== 'undefined' && data.org_by_country ? JSON.stringify(data.org_by_country.map(item => item.org_count)) : '[]' %>", []);
                } catch (e) {
                    console.error("Error parsing organization count data:", e);
                    orgCounts = [];
                }
                
                // Check if data is empty
                if (!countries || !orgCounts || countries.length === 0 || orgCounts.length === 0) {
                    showNoDataMessage('orgsByCountryChartContainer');
                    return;
                }
                
                // Generate colors
                function generateColors(count) {
                    const colors = [];
                    for (let i = 0; i < count; i++) {
                        const r = Math.floor(Math.random() * 255);
                        const g = Math.floor(Math.random() * 255);
                        const b = Math.floor(Math.random() * 255);
                        colors.push(`rgba(${r}, ${g}, ${b}, 0.7)`);
                    }
                    return colors;
                }
                
                const backgroundColors = generateColors(countries.length);
                const borderColors = backgroundColors.map(color => color.replace('0.7', '1')); // Darker border
                
                // Create chart
                new Chart(canvas.getContext('2d'), {
                    type: 'pie',
                    data: {
                        labels: countries,
                        datasets: [{
                            label: 'Organizations by Country',
                            data: orgCounts,
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true
                    }
                });
            } catch (error) {
                console.error("Error creating organizations by country chart:", error);
                showChartError('orgsByCountryChartContainer');
            }
        }

		(function() {
            try {
                // Safe data extraction for counter values
                let orgCount, userCount;
                
                try {
                    orgCount = parseInt("<%- typeof data !== 'undefined' && data.total_organizations ? data.total_organizations : '0' %>");
                    if (isNaN(orgCount)) orgCount = 0;
                } catch (e) {
                    console.error("Error parsing total organizations:", e);
                    orgCount = 0;
                }
                
                try {
                    userCount = parseInt("<%- typeof data !== 'undefined' && data.total_users ? data.total_users : '0' %>");
                    if (isNaN(userCount)) userCount = 0;
                } catch (e) {
                    console.error("Error parsing total users:", e);
                    userCount = 0;
                }
                
                // Initialize counters
                animateCounter('totalOrganizations', orgCount);
                animateCounter('totalUsers', userCount);
                
                // Initialize charts
                initCharts();
            } catch (error) {
                console.error("Dashboard initialization error:", error);
                // Show general error message if needed
                alert("There was an error loading the dashboard. Please try refreshing the page.");
            }
		})();
	</script>
<%- include('../partials/superadmin/footer.ejs') %>