<%- include('../partials/subscriber/header.ejs') %>
    <%- include('../partials/subscriber/navbar.ejs') %>

		<style>
			.btn-fixed-width {
				width: 80px;
				min-width: 60px;
				text-align: center;
			}
			.dropdown {
				position: relative;
				display: inline-block;
			}
		
			.dropdown-btn {
				cursor: pointer;
			}
	
		
			.dropdown-content {
				display: none;
				position: absolute;
				top: 120%;
				left: -50%;
				background-color: white;
				min-width: 100px;
				max-width: 160px;
				box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
				border-radius: 5px;
				z-index: 1;
			}
		
			.dropdown-content a {
				color: black;
				padding: 12px 16px;
				text-decoration: none;
				display: block;
			}
		
			.dropdown-content a:hover {
				background-color: #f1f1f1;
			}

			.container-div {
			    display: flex;
			    justify-content: flex-end;
			}

			.page-item a:hover {
		    	cursor: pointer;
			}
			.dropdown-menu {
			    border-radius: 0.5rem;
			    border: 1px solid rgba(0,0,0,0.08);
			}

			.form-control:focus {
			    box-shadow: 0 0 0 0.25rem rgba(13,110,253,0.15);
			}

			.btn-primary:focus {
			    box-shadow: 0 0 0 0.25rem rgba(13,110,253,0.15);
			}

			.dropdown-item:hover {
			    background-color: rgba(13,110,253,0.1);
			}
			.table-responsive {
		        overflow-x: auto;
		        -webkit-overflow-scrolling: touch;
		    }
		    
			
		    @media (max-width: 768px) {
				.container-div {
			        display: flex;
			        justify-content: flex-end;
			        flex-direction: column;
			        align-items: flex-end;
			    }

			    .row.align-items-center {
			        flex-direction: column;
			        align-items: flex-end !important;
			        width: 100%;
			    }

			    .search-container {
			        margin-bottom: 10px;
			        align-self: flex-end;
			    }

			    .col-auto.me-auto.mb-2 {
			        align-self: flex-end;
			        margin-right: 0 !important;
			    }

			    .container-div .row .col-auto {
			        width: auto;
			        max-width: none;
			    }
				.table th, .table td {
					padding: 0.5rem;
					font-size: 0.875rem;
				}
				
				.btn-sm {
					padding: 0.25rem 0.5rem;
					font-size: 0.75rem;
				}
				
				#btnIncome, #btnExpense, #addNewTranBtn {
					height: 60px !important;
					width: 180px !important;
					font-size: 0.9rem;
				}
				
				.transaction-buttons {
					flex-direction: column;
					gap: 1rem !important;
				}
				#expenseIcon {
					top: 33px !important;
					left: 20px !important;
				}
				#incomeIcon {
					top: 30px !important;
					left: 20px !important;
				}
				#btnGroupCard {
					width: 460px !important;
					height: 200px !important;
				}
				#menuNameFirst, #dayDay, #monthMonth {
					font-size: 16px !important;
				}
				#menuNameSec {
					font-size: 14px !important;
				}
				#dateDay {
					height: 40px !important;
					width: 40px !important;
					font-size: 14px;
				}
				#menuName{
					margin-left: 31px !important;
				}
				#dateSection{
					margin-right: 31px !important;
				}
				#addBtnNewTranGrp {
					top: 220px !important;
				}
				#headCard{
					margin-bottom: 100px !important;
				}
			}
			@media (max-width: 576px) {
				#btnIncome, #btnExpense, #addNewTranBtn {
					height: 50px !important;
					width: 130px !important;
					font-size: 0.85rem;
				}
				#expenseIcon {
					top: 30px !important;
					left: 15px !important;
				}
				#incomeIcon {
					top: 27px !important;
					left: 15px !important;
				}
				#btnGroupCard {
					width: 320px !important;
					height: 150px !important;
				}
				#menuNameFirst, #dayDay, #monthMonth {
					font-size: 14px !important;
				}
				#menuNameSec {
					font-size: 12px !important;
				}
				#dateDay {
					height: 32px !important;
					width: 32px !important;
					font-size: 13px;
				}
				#menuName {
					margin-left: 15px !important;
				}
				#dateSection {
					margin-right: 12px !important;
				}
				#addBtnNewTranGrp {
					top: 170px !important;
				}
				#headCard{
					margin-bottom: 90px !important;
				}
			}
			#btnIncome, #btnExpense, #addNewTranBtn {
			    height: 70px;
			    width: 250px;
			    top: 139px;
			    left: 55px;
			    border-radius: 16px;
			    border-width: 3px;
			    display: flex;
			    align-items: center;
			    justify-content: center;
				transition: all 0.3s;
			}
			.incomeBtnColor {
				background-color: #00C382;
			}
			.expenseBtnColor {
				background-color:#D62828;
			}
			.incomeBtnColor:hover {
			    background-color: #00A872 !important;
			    color: white !important;
			}

			.expenseBtnColor:hover {
			    background-color: #C42323 !important;
			    color: white !important;
			}
			#expenseIcon {
				height: 25px; width: 25px; position: absolute; top: 40px; left: 45px; transform: translateY(-50%);
			}
			#incomeIcon {
				height: 25px; width: 25px; position: absolute; top: 38px; left: 45px; transform: translateY(-50%);
			}
			#btnGroupCard {
				width: 600px;
				height: 220px;
				top: 155px;
				left: 374px;
				border-radius: 20px;
				border-width: 1px;
				box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
				display: flex; 
				flex-direction: column;
				justify-content: center;
			}
			#headOfCard {
			    display: flex;
			    justify-content: space-between;
			    align-items: center;
			    width: 100%;
				margin-bottom: 20px;
			}

			#menuName {
			    display: flex;
			    flex-direction: column;
				margin-left: 30px;
			}

			#dateSection {
			    display: flex;
			    align-items: center;
				margin-right: 30px;
			}

			#dateDay {
			    width: 50px;
			    height: 50px;
			    background-color: #4D4D4D;
			    color: white;
			    display: flex;
			    justify-content: center;
			    align-items: center;
			    border-radius: 50%;
			    font-weight: bold;
			    margin-right: 10px;
			}

			#dayMonth {
			    display: flex;
			    flex-direction: column;
			}
			#menuNameFirst {
				color: #05004E; 
				font-weight: 600; 
				font-size: 20px; 
				line-height: 32px; 
				letter-spacing: 0px;
			}
			#menuNameSec {
				font-weight: 400;
				font-size: 16px;
				line-height: 30px;
				letter-spacing: 0px;
			}
			#addBtnNewTranGrp {
				position: absolute;
				top: 250px;
				
			}
			#headCard{
				position: relative;
				margin-bottom: 120px;
			}
			.btnAddNewRight {
				right: 51%;
			}
			.btnAddNewLeft {
				left: 51%;
			}
			.search-container {
	            display: flex;
	            align-items: center;
	            position: relative;
	            transition: all 0.3s ease-in-out;
	        }

	        #searchInput {
	            width: 200px;
				height: 35px;
				top: 58px;
				left: 936px;
				border-radius: 15px;
	            padding: 10px;
	            font-size: 16px;
	            border: 1px solid #4D4D4D;
	            outline: none;
	            transition: all 0.3s ease-in-out;
	            background-color: white;
	            color: #333;
	        }

	        #searchInput:focus {
	            width: 250px;
	            box-shadow: 0px 4px 10px #4d4d4d5c;
	            border-color: #4D4D4D;
	        }

	        #searchBarButton {
	            background-color: white;
	            border: 1px solid #4D4D4D;
	            border-radius: 50%;
	            width: 33px;
	            height: 33px;
	            display: flex;
	            justify-content: center;
	            align-items: center;
	            margin-left: 8px;
	            transition: all 0.3s ease-in-out;
	        }

	        #searchBarButton:hover {
	            background-color: #4D4D4D;
	            border-color: #505050;
	        }

	        #searchBarButton:hover #searchIcon {
	            filter: invert(1);
	        }

	        #searchIcon {
	            width: 15px;
	            height: 15px;
	            transition: all 0.3s ease-in-out;
	        }
		</style>
		<div class="main-content">
			<!-- Main Content -->
			<div id="mainContainer" style="margin-top: 100px;"></div>
	        <main >
	            <div class="content">
					<!-- Message -->
					<% if (errorMessage) { %>
						<div id="errorBox" class="alert alert-danger" role="alert">
							<%= errorMessage %>
						</div>
						<% } %>
						<% if (successMessage) { %>
						<div id="successBox" class="alert alert-success" role="alert">
							<%= successMessage %>
						</div>
						<% } %>
					<div id="headCard">
						<div class="container my-2" id="btnGroupCard">
							<div id="headOfCard" class="d-flex">
								<div id="menuName">
									<div id="menuNameFirst">Transactions</div>
									<div id="menuNameSec" class="text-secondary"><% if (trans === 'income' ) { %> Income <% } else if (trans === 'expense') {%> Expense <% } else if (trans === 'all') {%> All <% } %> Transactions</div>
								</div>
								<div id="dateSection">
									<div id="dateDay"></div>
									<div id="dayMonth">
										<div id="dayDay"></div>
										<div id="monthMonth"></div>
									</div>
								</div>
							</div>					
							<div id="btnGroup">
								<div class="d-flex justify-content-center align-items-center gap-3">
									<div class="d-flex align-items-center gap-2">
										<div style="position: relative;">
											<img src="/income_icon.svg" id="incomeIcon" style="cursor: pointer;" onclick="document.getElementById('btnIncome').click();">
											<a type="button" href="/subscriber/transaction/income" 
											   class="text-decoration-none btn <% if (trans === 'income') { %> incomeBtnColor <% } else { %> btn-secondary <% } %> flex-grow-1 ps-4" 
											   id="btnIncome" onclick="handleClick('income', event)">
											  <div class="btn-content">
												<span class="text-light">INCOME</span>
											  </div>
											</a>
										</div>
									</div>
							
									<div class="d-flex align-items-center gap-2">
										<div style="position: relative;">
											<img src="/expense_icon.svg" id="expenseIcon" style="cursor: pointer;" onclick="document.getElementById('btnExpense').click();">
											<a type="button" href="/subscriber/transaction/expense" 
											   class="text-decoration-none btn <% if (trans === 'expense') { %> expenseBtnColor <% } else { %> btn-secondary <% } %> flex-grow-1 ps-4" 
											   id="btnExpense" onclick="handleClick('expense', event)">
											  <div class="btn-content">
												<span class="text-light">EXPENSE</span>
											  </div>
											</a>
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="d-flex justify-content-between align-items-center mb-4 <%= trans === 'income' ? 'btnAddNewRight'  : 'btnAddNewLeft' %>" id="addBtnNewTranGrp">
							<% if (trans !== 'all') { %>
								<button class="btn <%= trans === 'income' ? 'incomeBtnColor'  : 'expenseBtnColor' %> text-light" data-bs-toggle="modal" data-bs-target="#addNewTransaction" id="addNewTranBtn">
									Add Transaction
								</button>
							<% } %>
						</div>
						<div class="d-flex justify-content-between align-items-center mb-4 <%= trans === 'income' ? 'btnAddNewLeft'  : 'btnAddNewRight' %>" id="addBtnNewTranGrp">
							<% if (trans !== 'all') { %>
								<div id="addNewTranBtn" style="border: 1px solid #4D4D4D;">
									<%= trans === 'income' ? 'INCOME'  : 'EXPENSE' %>
								</div>
							<% } %>
						</div>
					</div>
					<!-- Nav Buttons -->
					<div class="container my-2">
						
					</div>
					
					
					
					<!-- Filters and Search Bar -->
					<div class="container-div my-2">
						<div class="row align-items-center">

							<!-- Search Bar -->
							<div class="col-auto mb-2">
								<div class="d-flex search-container">
									<input type="text" 
										   class="form-control" 
										   placeholder="Search..." 
										   id="searchInput" 
										   onkeydown="searchKey(event)">
									<button class="btn" id="searchBarButton" onclick="performSearch()">
										<img src="/search_icon.svg" alt="search icon" id="searchIcon">
									</button>
								</div>
							</div>


							<!-- Filter Buttons -->
							<div class="col-auto me-auto mb-2">
								<div class="d-flex gap-2">
									<div class="btn-group">
										<% if (trans !== 'all') { %>
											<button type="button" 
													class="btn btn-light dropdown-toggle" 
													data-bs-toggle="dropdown" 
													aria-expanded="false" style="border: 1px solid #4D4D4D; color: #4D4D4D; border-radius: 9px; ">
												<i class="fas fa-filter me-1" style="color: #4D4D4D;"></i>Category
											</button>
										<% } %>
										<ul class="dropdown-menu dropdown-menu-end shadow-sm my-2" id="dropdown-menu-category" style="max-height: 280px; overflow-y: auto;">
											<!-- Filter Bar For Category -->
											<% if (category.length > 8 ) { %>
												<li class="p-2">
													<input type="text" class="form-control" id="categorySearch" placeholder="Search category..." onkeyup="filterCategories()">
												</li>
											<%} %>
											
											<!-- ALL Button -->
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterCategory('all')">
												ALL
											</button>
											<% for (let i = 0; i < category.length; i++) { %>
												<button class="dropdown-item btn btn-light w-100 mb-1 category-item" 
														onclick="filterCategory('<%= category[i].id %>')" 
														data-num="<%= category[i].id %>" 
														value="<%= category[i].name %>" id="categoryBtns">
													<%= category[i].name.length > 20 ? category[i].name.substring(0, 20).toUpperCase() + '...' : category[i].name.toUpperCase() %>
												</button>
											<% } %>
										</ul>
									</div>
									<div class="btn-group">
										<button type="button" 
												class="btn btn-light dropdown-toggle" 
												data-bs-toggle="dropdown" 
												aria-expanded="false" style="border: 1px solid #4D4D4D; color: #4D4D4D; border-radius: 9px;">
											<i class="fas fa-calendar me-1" style="color: #4D4D4D;"></i><span id="dateFilterName">Date</span>
										</button>
										<ul class="dropdown-menu dropdown-menu-end shadow-sm my-2">
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(0, 'month')">All</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'day')">Today</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'week')">This Week</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'month')">This Month</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(7, 'day')">Last 7 Days</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(30, 'day')">Last 30 Days</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(-1, 'month')">Last Month</button>
											<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(3, 'month')">Last 3 Months</button>
										</ul>
									</div>
								</div>
							</div>
					
							
						</div>
					</div>
					<!-- Summary Card -->
					<div class="card mb-2 w-auto" style="max-width: 350px;">
						<div class="card-body">
							<div class="d-flex justify-content-between align-items-center">
								<p class="small mb-1">Date: <span id="summaryDate"></span></p>
								<button class="btn btn-sm btn-light" id="refreshButton" onclick="refreshAction()" style="color: #4D4D4D; border: 1px solid #4D4D4D; border-radius: 8px;">
									Reset
								</button>
							</div>
							<p class="small mb-1">Category: <span id="summaryCategory"></span></p>
							<p class="small mb-1">Transactions: <span id="summaryTranTotal"></span></p>
							<p class="small mb-1">Total Sum: <span id="summaryTotalSum"></span></p>
						</div>
					</div>
					<!-- Transaction Table -->
					<div class="table-responsive">
						<table class="table table-striped table-hover">
							<thead class="table-dark">
								<tr>
									<th style="min-width: 60px; cursor: pointer;" onclick="sortTable(0, 'number', this)">No. <span></span></th>
									<th style="min-width: 150px; cursor: pointer;" onclick="sortTable(1, 'string', this)">Description <span></span></th>
									<th style="min-width: 120px; cursor: pointer;" onclick="sortTable(2, 'number', this)">Amount <span></span></th>
									<th style="min-width: 180px; cursor: pointer;" onclick="sortTable(3, 'date', this)">Date <span></span></th>
									<th style="min-width: 120px; cursor: pointer;" onclick="sortTable(4, 'string', this)">Category <span></span></th>
									<th style="min-width: 120px; cursor: pointer;" onclick="sortTable(5, 'string', this)">Created By <span></span></th>
									<% if (trans !== 'all') { %>
										<th style="min-width: 130px; text-align: center;">Actions</th>
									<% } %>
								</tr>
							</thead>
							<tbody id="transactionTable">
								<% 
									let totalSum = 0; 
									if (transaction.length > 0) { 
										for (let i = 0; i < transaction.length; i++) { 
											totalSum += transaction[i].amount;
										} 
									} 
								%>
								<% if (transaction.length > 0) { %>
									<% for (let i = 0; i < transaction.length; i++) { %>
										<tr>
											<td class="text-nowrap ">
												<%= i + ((parseInt(pagination.page) - 1) * (parseInt(pagination.pageSize))) + 1 %>
											</td>
											<td class="text-nowrap " style="max-width: 200px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
												<%= transaction[i].description.length > 30 ? transaction[i].description.substring(0, 30) + '...' : transaction[i].description %>
											</td>
											<td class="text-nowrap <%= transaction[i].transactionType === 'income' || trans === 'income' ? 'text-income' : 'text-expense' %>">
												<% let formattedAmount = transaction[i].amount.toLocaleString(); %>
												<% if (transaction[i].baseCurrency === 'MMK') { %>
													<%= formattedAmount %> ks
												<% } else if (transaction[i].baseCurrency === 'USD') { %>
													$ <%= formattedAmount %>
												<% } else if (transaction[i].baseCurrency === 'THB') { %>
													฿ <%= formattedAmount %>
												<% } else { %>
													<%= formattedAmount %> <%= transaction[i].baseCurrency %>
												<% } %>
											</td>
											<td class="text-nowrap ">
												<%= new Date(
													trans === 'income' ? transaction[i].incomeDate :
													trans === 'expense' ? transaction[i].expenseDate :
													transaction[i].transactionDate
												).toLocaleString('en-US', { 
													day: '2-digit', 
													month: 'short', 
													year: 'numeric', 
													hour: '2-digit', 
													minute: '2-digit', 
													second: '2-digit', 
													hour12: true 
												}) %>
											</td>
											<td class="text-nowrap ">
												<%= transaction[i].category.length > 30 ? transaction[i].category.substring(0, 30) + '...' : transaction[i].category %>
											</td>
											<td class="text-nowrap ">
												<%= transaction[i].createdBy %>
											</td>
											<% if (trans !== 'all') { %>
												<td>
													<div class="d-flex flex-nowrap justify-content-center">
														<a href="/subscriber/transaction/<%= trans %>/detail/<%= transaction[i].id %>?trans=<%= trans %>&page=<%= pagination.page %>"
															class="btn btn-primary btn-sm btn-fixed-width me-1" style="border-radius: 8px;">View</a>
														<a href="/subscriber/transaction/<%= trans %>/update/<%= transaction[i].id %>?trans=<%= trans %>&page=<%= pagination.page %>"
															class="btn btn-warning btn-sm btn-fixed-width me-1" style="border-radius: 8px;">Edit</a>
													</div>
												</td>
											<% } %>
										</tr>
									<% } %>
								<% } else { %>
									<tr>
										<td colspan="<%= trans === 'all' ? 6 : 7 %>" class="text-center text-muted">No transactions found.</td>
									</tr>
								<% } %>
							</tbody>
						</table>
					</div>
					
					
	            </div>
	        </main>
			<!-- Modal for adding new transaction -->
			<div class="modal fade" id="addNewTransaction" tabindex="-1" aria-labelledby="addNewTransactionModalLabel"
	            aria-hidden="true">
	            <div class="modal-dialog">
	                <div class="modal-content">
	                    <div class="modal-header">
	                        <h5 class="modal-title" id="addNewTransactionModalLabel">Add New Transaction</h5>
	                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
	                    </div>
	                    <div class="modal-body">
							<% if (category.length >= 1) {%> 
	                        <form id="addNewTransactionForm" action="/subscriber/transaction/<%= trans %>/create" method="post" enctype="multipart/form-data" onsubmit="setCurrentDateTime(event)">
								<div class="mb-3">
									<label for="transCategory" class="form-label">Category *</label>
									<% if (category.length >= 1) {%> 
									<select id="transCategory" name="catId" class="form-select inputRequired" required onchange="toggleFormFields()">
										<% category.forEach(option => { %>
											<option value="<%= option.id %>" data-parent="<%= option.parentId %>"><%= option.name %></option>
										<% }); %>
									</select>
									<%} else {%> 
										<div>No Category</div>
										<%} %>
								</div>
							
								<!-- Standalone Fields -->
								<div id="standaloneFields">
									<div class="mb-3">
										<label for="transDescription" class="form-label">Description *</label>
										<input type="text" class="form-control inputRequired" maxlength="100" name="description" id="transDescription"
											placeholder="Enter description" oninput="checkInputs('transDescriptionError', 'transDescription')" required>
										<p id="transDescriptionError" class="mt-2 d-none text-danger">*Description can't exceed 100 characters!</p>
									</div>
							
									<div class="mb-3">
										<label for="transAmount" class="form-label">Amount *</label>
										<input type="number" class="form-control inputRequired" maxlength="30" name="amount" id="transAmount"
											placeholder="Enter amount" oninput="checkInputs('transAmountError', 'transAmount')" required>
										<p id="transAmountError" class="mt-2 d-none text-danger">*Amount can't exceed 30 characters!</p>
									</div>
								</div>
							
								<!-- Parent Sale Fields -->
								<div id="parentSaleFields">
									<div class="mb-3">
										<label for="itemName" class="form-label">Item Name *</label>
										<input type="text" class="form-control inputRequired" maxlength="100" oninput="checkInputs('itemNameError', 'itemName')" name="itemName" id="itemName" placeholder="Enter item name" required>
										<p id="itemNameError" class="mt-2 d-none text-danger">*Item Name can't exceed 100 characters!</p>
									</div>
							
									<div class="mb-3">
										<label for="pricePerUnit" class="form-label">Price per Unit *</label>
										<input type="number" class="form-control inputRequired" maxlength="30" oninput="calculateTotalAmount('pricePerUnitError', 'pricePerUnit')" name="price" id="pricePerUnit" placeholder="Enter price per unit"  required>
										<p id="pricePerUnitError" class="mt-2 d-none text-danger">*Price per Unit can't exceed 30 characters!</p>
									</div>
							
									<div class="mb-3">
										<label for="quantity" class="form-label">Quantity *</label>
										<input type="number" class="form-control inputRequired" maxlength="30" oninput="calculateTotalAmount('quantityError', 'quantity')" name="quantity" id="quantity" placeholder="Enter quantity" required>
										<p id="quantityError" class="mt-2 d-none text-danger">*Quantity can't exceed 30 characters!</p>
									</div>
									<div class="mb-3">
										<label class="form-label">Amount *</label>
										<div class="form-control text-secondary" id="totalAmount" placeholder="Total Amount" >Total Amount</div>
									</div>
									<% if( trans === 'income') {%>
										<div class="mb-3">
											<label for="salesperson" class="form-label">Salesperson *</label>
											<% if(salesperson.length > 0) {%>
												<select id="salesperson" name="salesperson" class="form-select inputRequired" required onchange="updateSalespersonName()">
													<% salesperson.forEach(option => { %>
														<option value="<%= option.id %>" data-salespersonName="<%= option.name %>"><%= option.name %></option>
													<% }); %>
												</select>
												<p style="font-size: small;" class="text-secondary mt-1">Add a new salesperson in "<strong><a href="/subscriber/salesperson" style="text-decoration: none;">Salesperson</a></strong>" menu</p>
												<input type="text" value="<%= salesperson.length > 0 ? salesperson[0].name : '' %>" style="display: none;" id="salespersonName" name="salespersonName">
												<%} 
											else {%>
												<input type="text" class="form-control inputRequired" id="salespersonNameNew" name="salespersonNameNew"  maxlength="100" oninput="calculateTotalAmount('salespersonNameNewError', 'salespersonNameNew')" required>
												<p id="salespersonNameNewError" class="mt-2 d-none text-danger">*Salesperson Name can't exceed 100 characters!</p>
												<%} %>
											
										</div>
									<%}%>
							
									<div class="mb-3">
										<label for="customerName" class="form-label"><%= trans === 'income' ? 'Customer': 'Vendor'%> Name</label>
										<input type="text" class="form-control" maxlength="100" oninput="checkInputs('customerNameError', 'customerName')" name="<%= trans === 'income' ? 'customer': 'vendorName'%>" id="customerName" placeholder="Enter <%= trans === 'income' ? 'customer': 'vendor'%> name">
										<p id="customerNameError" class="mt-2 d-none text-danger">*Customer Name can't exceed 100 characters!</p>
									</div>
								</div>
							
								<!-- Common Receipt Field -->
								<input type="hidden" name=<% if (trans === 'income' ) { %> incomeDate <% } else {%> expenseDate <% } %> id="transDate">
								<div class="mb-3" id="receiptDiv">
									<label for="transReceipt" class="form-label">Receipt</label>
									<input type="file" class="form-control" name="receipt" id="transReceipt">
								</div>
							
								<button type="submit" id="addBtn" class="btn btn-primary w-100">Add Transaction</button>
							</form>
							<%} else {%>
								<div>No Category</div>
								<%} %>
	                    </div>
	                </div>
	            </div>
	        </div>
			<!-- PageSize -->
			<div class="btn-group my-2" style="max-width: 100px;">
				<button type="button" 
						class="btn btn-outline-dark dropdown-toggle" 
						data-bs-toggle="dropdown" 
						aria-expanded="false">
					Page Size
				</button>
				<ul class="dropdown-menu dropdown-menu-end shadow-sm" id="dropdown-menu-pageSize" style="max-height: 280px; overflow-y: auto;">
					
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="setPageSize(5)">
						5
					</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="setPageSize(10)">
						10
					</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="setPageSize(15)">
						15
					</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="setPageSize(20)">
						20
					</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="setPageSize(30)">
						30
					</button>
				</ul>
			</div>
			<!-- Pagination -->
			<% if (pagination && pagination.totalPages > 1) { %>
				<nav aria-label="Pagination" id="paginationNav">
					<ul class="pagination justify-content-center">
						<li class="page-item <%= pagination.page <= 1 ? 'disabled' : '' %>">
							<a class="page-link" onclick=<%= pagination.page > 1 ? 'goToPage(1)' : '' %>><<</a>
						</li>
			   
						<li class="page-item <%= pagination.page <= 1 ? 'disabled' : '' %>">
							<a class="page-link" onclick=<%= pagination.page > 1 ? 'goToPage(' + (pagination.page - 1) + ')' : '' %>><</a>
						</li>
			   
						<% if (pagination.page > 2) { %>
							<li class="page-item"><a class="page-link" onclick="goToPage(1)">1</a></li>
							<% if (pagination.page > 3) { %>
								<li class="page-item disabled"><a class="page-link">...</a></li>
							<% } %>
						<% } %>
						
						<% if (pagination.page > 1) { %>
							<% for (let i = Math.max(1, pagination.page - 1); i <= Math.min(parseInt(pagination.totalPages), parseInt(pagination.page) + 1); i++) { %>
								<li class="page-item <%= parseInt(i) === parseInt(pagination.page) ? 'active' : '' %>">
									<a class="page-link" onclick="goToPage('<%= i %>')"><%= i %></a>
								</li>
							<% } %>
						<% } else { %>
							<% for (let i = 1; i <= Math.min(2, pagination.totalPages); i++) { %>
								<li class="page-item <%= parseInt(i) === parseInt(pagination.page) ? 'active' : '' %>">
									<a class="page-link" onclick="goToPage('<%= i %>')"><%= i %></a>
								</li>
							<% } %>
						<% } %>
			   
						<% if (pagination.page < pagination.totalPages - 1) { %>
							<% if (pagination.page < pagination.totalPages - 2) { %>
								<li class="page-item disabled"><a class="page-link">...</a></li>
								<li class="page-item">
									<a class="page-link" onclick="goToPage('<%= pagination.totalPages %>')">
										<%= pagination.totalPages %>
									</a>
								</li>
							<% } else if (pagination.page < pagination.totalPages) { %>
								<li class="page-item">
									<a class="page-link" onclick="goToPage('<%= pagination.totalPages %>')">
										<%= pagination.totalPages %>
									</a>
								</li>
							<% } %>
						<% } %>
			   
						<li class="page-item <%= pagination.page >= pagination.totalPages ? 'disabled' : '' %>">
							<a class="page-link" onclick=<%= pagination.page < pagination.totalPages ? 'goToPage(' + (parseInt(pagination.page) + 1) + ')' : '' %>>></a>
						</li>
			   
						<li class="page-item <%= pagination.page >= pagination.totalPages ? 'disabled' : '' %>">
							<a class="page-link" onclick=<%= pagination.page < pagination.totalPages ? 'goToPage(' + pagination.totalPages + ')' : '' %>>>></a>
						</li>
					</ul>
				</nav>
			<% } %>
		</div>
		<div style="height: 300px;"></div>
		
		
		<script>
			const searchParams = new URLSearchParams(window.location.search);
			const type = searchParams.get('type')
			const num = searchParams.get('num')
			const catId = searchParams.get('catId')
			
			let categoryBtns = document.querySelectorAll('#categoryBtns')
			
			const totalTrans = "<%= transaction.length %>"
			if (totalTrans) {
				document.getElementById('summaryTranTotal').innerText = totalTrans
			} else {
				document.getElementById('summaryTranTotal').innerText = "0"
			}
			const search = searchParams.get('search')
			if (typeof search === 'string' && search.trim().length > 0) {
				document.getElementById('searchInput').value = search;
			}
			const totalSum = "<%= totalSum %>";
			if (parseInt(totalTrans) > 0 && totalSum) {
				const currency = "<%= transaction.length > 0 ? transaction[0].baseCurrency : '' %>";
				let formattedTotal = new Intl.NumberFormat('en-US').format(totalSum);

			    if (currency === "MMK") {
			        document.getElementById('summaryTotalSum').innerText = `${formattedTotal} ks`;
			    } else if (currency === "USD") {
			        document.getElementById('summaryTotalSum').innerText = `$ ${formattedTotal}`;
				} else if (currency === "THB") {
						document.getElementById('summaryTotalSum').innerText = `฿ ${formattedTotal}`;
			    } else {
			        document.getElementById('summaryTotalSum').innerText = `${currency} ${formattedTotal}`;
			    }
			} else {
			    document.getElementById('summaryTotalSum').innerText = "0";
			}

			if (catId) {
				categoryBtns.forEach(categoryBtn => {
					let categoryBtnId = categoryBtn.dataset.num
					if (catId === categoryBtnId) {
						const categoryName = categoryBtn.value.toUpperCase()
						document.getElementById('summaryCategory').innerText = categoryName
					}
				})
			} else if (!catId) {
				document.getElementById('summaryCategory').innerText = "ALL"
			}
			
			if (type === 'month') {
				if (num === '0') {
					document.getElementById('summaryDate').innerText = "ALL"
					document.getElementById('dateFilterName').innerText = "Date"
				} else if (num === '1') {
					document.getElementById('summaryDate').innerText = "This Month"
					document.getElementById('dateFilterName').innerText = "This Month"
				} else if (num === '3') {
					document.getElementById('summaryDate').innerText = "Last 3 Months"
					document.getElementById('dateFilterName').innerText = "Last 3 Months"
				} else if (num === '-1') {
					document.getElementById('summaryDate').innerText = "Last Month"
					document.getElementById('dateFilterName').innerText = "Last Month"
				}
			} else if (type === 'week') {
				document.getElementById('summaryDate').innerText = "This Week"
				document.getElementById('dateFilterName').innerText = "This Week"
			} else if (type === 'day') {
				if (num === '1') {
					document.getElementById('summaryDate').innerText = "Today"
					document.getElementById('dateFilterName').innerText = "Today"
				} else if (num === '7') {
					document.getElementById('summaryDate').innerText = "Last 7 Days"
					document.getElementById('dateFilterName').innerText = "Last 7 Days"
				} else if (num === '30') {
					document.getElementById('summaryDate').innerText = "Last 30 Days"
					document.getElementById('dateFilterName').innerText = "Last 30 Days"
				}
			} else {
				document.getElementById('summaryDate').innerText = "ALL"
				document.getElementById('dateFilterName').innerText = "Date"
			}
			const today = new Date();
			const day = today.getDate();
			const weekday = today.toLocaleDateString("en-US", { weekday: "long" });
			const month = today.toLocaleDateString("en-US", { month: "long" });

			document.getElementById("dateDay").textContent = day;
			document.getElementById("dayDay").textContent = weekday + ",";
			document.getElementById("monthMonth").textContent = month;
			function calculateTotal() {
				const quantity = document.getElementById('quantity').value;
				const price = document.getElementById('pricePerUnit').value;
				const total = document.getElementById('totalAmount');
				const baseCurrency = "<%= baseCurrency %>"
				let totalAmount;
				if (!quantity || parseInt(quantity) <= 0 || !price || parseInt(price) <= 0) {
					total.innerText = "Total Amount"
					total.classList.add('text-secondary')
				} else {
					let amount;
					totalAmount = parseInt(quantity) * parseInt(price)
					totalAmount = totalAmount.toLocaleString()
					if (baseCurrency === 'MMK') {
						amount = `${totalAmount}  ks`
					} else if (baseCurrency === 'USD') {
						amount = `$ ${totalAmount}`
					} else if (baseCurrency === 'THB') {
						amount = `฿ ${totalAmount}`
					} else { 
						amount = `${totalAmount} baseCurrency`
					}
					total.classList.remove('text-secondary')
					total.innerText = amount
				}
			}
			calculateTotal();
			function calculateTotalAmount(errorMsg, field) {
				checkInputs(errorMsg, field);
				calculateTotal();
			}

			
			let sortDirections = {};

			function sortTable(columnIndex, type, headerElement) {
			    let table = document.getElementById("transactionTable");
			    let rows = Array.from(table.getElementsByTagName("tr"));
			    let ascending = !sortDirections[columnIndex];
			    sortDirections[columnIndex] = ascending;

			    rows.sort((rowA, rowB) => {
			        let cellA = rowA.getElementsByTagName("td")[columnIndex]?.innerText.trim() || "";
			        let cellB = rowB.getElementsByTagName("td")[columnIndex]?.innerText.trim() || "";

			        if (type === "number") {
			            cellA = parseFloat(cellA.replace(/[^0-9.-]/g, "")) || 0;
			            cellB = parseFloat(cellB.replace(/[^0-9.-]/g, "")) || 0;
			            return ascending ? cellA - cellB : cellB - cellA;
			        } else if (type === "date") {
			            cellA = new Date(cellA).getTime() || 0;
			            cellB = new Date(cellB).getTime() || 0;
			            return ascending ? cellA - cellB : cellB - cellA;
			        } else {
			            return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
			        }
			    });
			    rows.forEach(row => table.appendChild(row));
			    document.querySelectorAll("th span").forEach(span => span.innerHTML = "");
			    headerElement.querySelector("span").innerHTML = ascending ? " ▲" : " ▼";
			}


			function filterCategories() {
		        let input = document.getElementById('categorySearch').value.toLowerCase();
		        let items = document.querySelectorAll('.category-item');

		        items.forEach(item => {
		            let text = item.getAttribute('value').toLowerCase();
		            item.style.display = text.includes(input) ? 'block' : 'none';
		        });
		    }

		    function setCurrentDateTime(event) {
		        event.preventDefault();

		        const now = new Date();
			    const year = now.getFullYear();
			    const month = String(now.getMonth() + 1).padStart(2, '0');
			    const day = String(now.getDate()).padStart(2, '0');
			    const hours = String(now.getHours()).padStart(2, '0');
			    const minutes = String(now.getMinutes()).padStart(2, '0');
			    const formattedDate = `${year}-${month}-${day}T${hours}:${minutes}`;
		        document.getElementById('transDate').value = formattedDate;

		        event.target.submit();
		    }
			
			function goToPage(pageNumber) {
			    const baseUrl = new URL(window.location.href);
			    baseUrl.searchParams.set("page", pageNumber);
			    window.location.href = baseUrl.toString();
			}


			function handleClick(buttonType, event) {
			    event.preventDefault();

			    const btnIncome = document.getElementById('btnIncome');
			    const btnExpense = document.getElementById('btnExpense');
			    if (buttonType === 'income') {
			        if (btnIncome.classList.contains('incomeBtnColor')) {
			            window.location.href = '/subscriber/transaction/transactions';
			        } else {
			            btnIncome.classList.remove('btn-secondary');
			            btnIncome.classList.add('incomeBtnColor');
			            btnExpense.classList.remove('expenseBtnColor');
			            btnExpense.classList.add('btn-secondary');
			            window.location.href = '/subscriber/transaction/income';
			        }
			    } else if (buttonType === 'expense') {
			        if (btnExpense.classList.contains('expenseBtnColor')) {
			            window.location.href = '/subscriber/transaction/transactions';
			        } else {
			            btnExpense.classList.remove('btn-secondary');
			            btnExpense.classList.add('expenseBtnColor');
			            btnIncome.classList.remove('incomeBtnColor');
			            btnIncome.classList.add('btn-secondary');
			            window.location.href = '/subscriber/transaction/expense';
			        }
			    }
			}

			
            function checkInputs(messageBox, inputField) {
				const form = document.getElementById('addNewTransactionForm');
	            const addButton = document.getElementById('addBtn');
	            const inputs = form.querySelectorAll('.inputRequired');
                let allFilled = true;
                inputs.forEach(index => {
                if (!index.value.trim()) {
                    allFilled = false;
                }
                });
                addButton.disabled = !allFilled;
				const message = document.getElementById(messageBox)
				const input = document.getElementById(inputField)
				if (input.value.length === parseInt(input.maxLength)) {
			        message.classList.remove('d-none');
			    } else {
			        message.classList.add('d-none');
			    }
            }


            function submitForm(event) {
			    addButton.disabled = true;
			    addButton.textContent = 'Submitting...';
			}

			function toggleDropdown(dropdown_menu) {
			    let dropdown = document.getElementById(dropdown_menu);
			    let isVisible = dropdown.style.display === "block";

			    document.querySelectorAll(".dropdown-content").forEach(menu => {
			        menu.style.display = "none";
			    });

			    if (!isVisible) {
			        dropdown.style.display = "block";
			    }
			}
	
			function searchKey(event){
				if (event.key === 'Enter') {
					performSearch();
				}
			}

			function performSearch() {
			    let input = document.getElementById("searchInput").value.trim();
			    let url = new URL(window.location.href);
			    
			    if (input) {
			        url.searchParams.set("search", input);
					url.searchParams.delete("page");
			    } else {
			        url.searchParams.delete("search");
					url.searchParams.delete("page");
			    }
			    window.location.href = url.toString();
			}

			function filterCategory(category_name) {
			    let url = new URL(window.location.href);
			    if (category_name && category_name !== 'all') {
			        url.searchParams.set("catId", category_name);
					url.searchParams.delete("page");
			    } else {
			        url.searchParams.delete("catId");
					url.searchParams.delete("page");
			    }
			    window.location.href = url.toString();
			}

			function filterDate(num, type) {
			    let url = new URL(window.location.href);
			    if (num && type && num !== 0) {
			        url.searchParams.set("num", num);
					url.searchParams.set("type", type);
					url.searchParams.delete("page");
			    } else {
			        url.searchParams.delete("num");
					url.searchParams.delete("type");
					url.searchParams.delete("page");
			    }
			    window.location.href = url.toString();
			}

			function setPageSize(pagesize) {
				let url = new URL(window.location.href);
			    if (pagesize && pagesize !== 10) {
			        url.searchParams.set("pageSize", pagesize);
					url.searchParams.delete("page");
			    } else {
			        url.searchParams.delete("pageSize");
					url.searchParams.delete("page");
			    }
			    window.location.href = url.toString();
			}

			function refreshAction() {
			    window.location.href = window.location.pathname;
			}

			const parentSaleFields = document.getElementById("parentSaleFields");
			const standaloneFields = document.getElementById("standaloneFields");
			const parentSaleHTML = parentSaleFields;
			const standaloneHTML = standaloneFields;

			function toggleFormFields() {
			    const selectedCategory = document.getElementById("transCategory");
			    const selectedOption = selectedCategory.options[selectedCategory.selectedIndex];
			    const parentId = selectedOption.getAttribute("data-parent");

			    parentSaleFields.remove();
			    standaloneFields.remove();

				
			    const form = document.getElementById("addNewTransactionForm");
			    const receipt = document.getElementById("receiptDiv");

			    if (parentId === "1" || parentId === "2") {
			        form.insertBefore(parentSaleHTML, receipt);
			    } else {
			        form.insertBefore(standaloneHTML, receipt);
			    }
			}
			toggleFormFields();

			function updateSalespersonName() {
			    const selectedOption = document.getElementById("salesperson").options[document.getElementById("salesperson").selectedIndex];
			    const salespersonName = selectedOption.getAttribute("data-salespersonName");
			    document.getElementById("salespersonName").value = salespersonName;
			}
			
		</script>
        <%- include('../partials/subscriber/footer.ejs') %>