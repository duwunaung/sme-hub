<%- include('../partials/subscriber/header.ejs') %>
<%- include('../partials/subscriber/navbar.ejs') %>

<style>
@media (max-width: 576px){
	#searchInput {
		width: 160px !important;
	}
	.table-container {
		overflow-x: auto;
		flex-direction: column;
	}
}
.dropdown {
  position: relative;
  display: inline-block;
}
.dropdown-btn {
  cursor: pointer;
}
.dropdown-menu {
  border-radius: 0.5rem;
  border: 1px solid rgba(0,0,0,0.08);
}
.dropdown-item:hover {
  background-color: rgba(13,110,253,0.1);
}
.main-content {
  margin-top: 100px;
}
.actionBtn:hover {
	background-color: #6e6e6e;
	color: white;
}

.actionBtn {
	cursor: pointer;
	background-color: #4D4D4D;
	color: white;
	font-weight: 400;
	border: none;
	padding: 5px 10px;
	border-radius: 6px;
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
	transition: all 0.15s ease-in-out;
}
#searchInput {
    width: 250px;
	height: 35px;
	top: 58px;
	left: 936px;
	border-radius: 15px;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #4D4D4D;
    outline: none;
    transition: all 0.3s ease-in-out;
    background-color: white;
    color: #333;
}

#searchInput:focus {
    box-shadow: 0px 4px 10px #4d4d4d5c;
    border-color: #4D4D4D;
}
.table-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}

.chart-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 20px;
}

.table-responsive {
    border-radius: 8px;
    overflow-x: auto;
}

.table th {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
}

.table th:hover {
    background-color: #e9ecef;
}

.table td {
    vertical-align: middle;
    border-bottom: 1px solid #dee2e6;
}

.table tbody tr:hover {
    background-color: #f8f9fa;
}

.btn-fixed-width {
    min-width: 80px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .table-responsive {
        font-size: 14px;
    }
    
    .table th,
    .table td {
        padding: 8px 4px;
    }
    
    .actionBtn {
        padding: 4px 8px;
        font-size: 12px;
    }
    
    .btn-fixed-width {
        min-width: 60px;
        font-size: 12px;
    }
}

@media (max-width: 576px) {
    .table-responsive {
        font-size: 12px;
    }
    
    .table th,
    .table td {
        padding: 6px 2px;
    }
}

.chart-canvas {
    max-height: 300px;
    width: 100%;
}

@media (min-width: 992px) {
    .chart-canvas {
        max-height: 400px;
    }
}
</style>

<div class="main-content" style="padding-bottom: 300px;">
  <!-- Main Content -->
  <div id="mainContainer"></div>
  
  <main class="container">
    <div class="content">
      <!-- Messages -->
      <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
        <div id="errorBox" class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= errorMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      
      <% if (typeof successMessage !== 'undefined' && successMessage) { %>
        <div id="successBox" class="alert alert-success alert-dismissible fade show" role="alert">
          <%= successMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
    </div>
    
	<div>
		<button class="backBtn" onclick="goBack()">
			&lt; Back
		</button>
	</div>
    
    <div id="contentArea">
		<div class="d-block d-md-flex justify-content-between" style="margin: 10px 10px;">
			<!-- Search Bar -->
			<div class="d-flex search-container me-2 my-1">
				<input type="text" 
					   class="form-control" 
					   placeholder="Search..." 
					   id="searchInput" 
					   onkeydown="searchKey(event)">
				<button class="btn" id="searchBarButton" onclick="performSearch()">
					<img src="/search_icon.svg" alt="search icon" id="searchIcon">
				</button>
			</div>
			<!-- Date Filter -->
			<div class="btn-group my-1">
				<button type="button" 
						class="btn btn-light dropdown-toggle" 
						data-bs-toggle="dropdown" 
						aria-expanded="false" style="border: 1px solid #4D4D4D; color: #4D4D4D; border-radius: 9px;">
					<i class="fas fa-calendar me-1" style="color: #4D4D4D;"></i><span id="filterName">Date</span>
				</button>
				<ul class="dropdown-menu dropdown-menu-end shadow-sm my-2">
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(0, 'month')">All</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'day')">Today</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'week')">This Week</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(1, 'month')">This Month</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(7, 'day')">Last 7 Days</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(30, 'day')">Last 30 Days</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(-1, 'month')">Last Month</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" onclick="filterDate(3, 'month')">Last 3 Months</button>
					<button class="dropdown-item btn btn-light w-100 mb-1" data-bs-toggle="modal" data-bs-target="#customDateModal">Custom Date</button>
				</ul>
			</div>

			<!-- Custom Date Filter -->
			<!-- <div>
			  <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#customDateModal">
			    Custom Date
			  </button>
			</div> -->
			<!-- Export As Csv -->
			 <div class="my-1">
			  <button class="exportBtn" onclick="exportCsv()">
				Export As CSV
			  </button>
			</div>
		</div>
	</div>
	

	<!-- Modal for custom date -->
	<div class="modal fade" id="customDateModal" tabindex="-1" aria-labelledby="customDateModalLabel" aria-hidden="true">
	  <div class="modal-dialog">
	    <div class="modal-content shadow">
	      <div class="modal-header">
	        <h5 class="modal-title" id="customDateModalLabel">Select Date Range</h5>
	        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
	      </div>
	      <div class="modal-body">
	        <div class="mb-3">
	          <label for="start-date" class="form-label">From</label>
	          <input type="date" class="form-control" id="start-date" onchange="updateEndMin()">
	        </div>
	        <div class="mb-3">
	          <label for="end-date" class="form-label">To</label>
	          <input type="date" class="form-control" id="end-date">
	        </div>
	      </div>
		  <div>
			<p id="errMsgDate" class="text-danger d-none">*Please select start date and end date!</p>
		  </div>
	      <div class="modal-footer">
	        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
	        <button type="button" class="btn btn-danger" onclick="getDateRange()">Apply</button>
	      </div>
	    </div>
	  </div>
	</div>
	<div class="container-fluid p-3">
        <div class="row g-3">
            <!-- Table Section - Left on large screens, bottom on small screens -->
            <div class="col-12 col-lg-8 order-2 order-lg-1">
                <div class="table-container">
					<!-- salesperson Table -->
					<div class="table-responsive">
						<table class="table table-hover">
							<thead style="height: 50px;">
							  <tr>
								<th style="min-width: 60px; cursor: pointer;" onclick="sortTable(0, 'number', this)">No. <span></span></th>
								<th style="min-width: 150px; cursor: pointer;" onclick="sortTable(1, 'string', this)">Name <span></span></th>
								<th style="min-width: 150px; cursor: pointer;" onclick="sortTable(2, 'number', this)">Sale <span></span></th>
								<th style="min-width: 80px; cursor: pointer;" onclick="sortTable(3, 'number', this)">Transaction Count <span></span></th>
								<th style="min-width: 190px;">Actions</th>
							</tr>
							</thead>
							<tbody id="salespersonTable">
								<% if (salesperson.length > 0) { %>
									<% for (let i = 0; i < salesperson.length; i++) { %>
										<tr style="height: 55px;">
											<td class="text-nowrap"><%= i + 1 %></td>
											<td class="text-nowrap"><%= salesperson[i].name.length > 30 ? salesperson[i].name.substring(0, 30) + '...' : salesperson[i].name %></td>
											<td class="text-nowrap text-income">
												<% let totalSales = parseInt(salesperson[i].totalSales) %>
												<% let formattedAmount = totalSales.toLocaleString(); %>
												<% if (baseCurrency === 'MMK') { %>
													<%= formattedAmount %> ks
												<% } else if (baseCurrency === 'USD') { %>
													$ <%= formattedAmount %>
												<% } else if (baseCurrency === 'THB') { %>
													à¸¿ <%= formattedAmount %>
												<% } else { %>
													<%= formattedAmount %> <%= baseCurrency %>
												<% } %>
											</td>
											<td class="text-nowrap">
												<%= salesperson[i].totalTransactions %>
											</td>
											<td>
												<div >
											        <button class="actionBtn" onclick="toggleDropdownAction(event, '<%= i + 1 %>')">
											            Actions
											        </button>
											        <div id="actionsDropdowns-<%= i + 1 %>" 
											             class="d-none" >
											            <div class="d-flex " style="margin-top: 10px;">
											                <button onclick="viewDetail('<%= salesperson[i].id %>')"
																class="btn btn-primary btn-sm btn-fixed-width me-1" style="border-radius: 8px;">
																Summary
															</button>
											                <button onclick="viewDetailTrans('<%= salesperson[i].id %>')"
																class="btn btn-danger btn-sm btn-fixed-width me-1" style="border-radius: 8px;">
																View
															</button>
											            </div>
											        </div>
											    </div>
											</td>
										</tr>
									<% } %>
								<% } else { %>
									<tr>
										<td colspan="5" class="text-center text-muted">No data found.</td>
									</tr>
								<% } %>
							</tbody>
						</table>
					</div>
				</div>
        	</div>
			<div class="col-12 col-lg-4 order-1 order-lg-2">
                <div class="chart-container">
                    <h5 class="card-title text-center mb-3">Sales Income by Salesperson</h5>
					<% function checkSalesperson(salesperson) { %>
						<% if (salesperson && salesperson.length > 0) { %>
							<% for (let i = 0; i < salesperson.length; i++) { %>
								<% if (salesperson[i].totalSales > 0) { %>
									<% return true; %>
								<% } %>
							<% } %>
						<% } %>
					<%}%>
					<% if (salesperson && salesperson.length > 0 && checkSalesperson(salesperson)) { %>
                        <canvas id="salespersonIncomeChart" class="chart-canvas"></canvas>
                    <% } else { %>
                        <div class="d-flex flex-column align-items-center justify-content-center h-100">
                            <i class="fas fa-chart-pie text-muted" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-3 text-center">
                                No data available. 
                                <a href="/subscriber/transaction/income" class="text-primary">Add new income</a>
                            </p>
                        </div>
                    <% } %>
                </div>
            </div>
    	</div>
	</div>

	<div style="height: 300px;"></div>
  </main>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

let sortDirections = {};

function sortTable(columnIndex, type, headerElement) {
	let table = document.getElementById("salespersonTable");
	let rows = Array.from(table.getElementsByTagName("tr"));
	let ascending = !sortDirections[columnIndex];
	sortDirections[columnIndex] = ascending;

	rows.sort((rowA, rowB) => {
		let cellA = rowA.getElementsByTagName("td")[columnIndex]?.innerText.trim() || "";
		let cellB = rowB.getElementsByTagName("td")[columnIndex]?.innerText.trim() || "";

		if (type === "number") {
			cellA = parseFloat(cellA.replace(/[^0-9.-]/g, "")) || 0;
			cellB = parseFloat(cellB.replace(/[^0-9.-]/g, "")) || 0;
			return ascending ? cellA - cellB : cellB - cellA;
		} else if (type === "date") {
			cellA = new Date(cellA).getTime() || 0;
			cellB = new Date(cellB).getTime() || 0;
			return ascending ? cellA - cellB : cellB - cellA;
		} else {
			return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
		}
	});
	rows.forEach(row => table.appendChild(row));
	document.querySelectorAll("th span").forEach(span => span.innerHTML = "");
	headerElement.querySelector("span").innerHTML = ascending ? " â²" : " â¼";
}

setTimeout(function() {
  const alerts = document.querySelectorAll('.alert');
  for (let i = 0; i < alerts.length; i++) {
    if (alerts[i].classList.contains('show')) {
      alerts[i].classList.remove('show');
      setTimeout(function() { 
        if (alerts[i].parentNode) {
          alerts[i].parentNode.removeChild(alerts[i]);
        }
      }, 150);
    }
  }
}, 5000);

function filterDate(num, type) {
    let url = new URL(window.location.href);
    if (num && type && num !== 0) {
        url.searchParams.set("num", num);
		url.searchParams.set("type", type);
		url.searchParams.delete("from");
		url.searchParams.delete("to");
		url.searchParams.delete("export");
    } else {
        url.searchParams.delete("num");
		url.searchParams.delete("type");
		url.searchParams.delete("from");
		url.searchParams.delete("to");
		url.searchParams.delete("export");
    }
    window.location.href = url.toString();
}

function updateEndMin() {
	document.getElementById('errMsgDate').classList.add('d-none')
    var start = document.getElementById("start-date");
    var end = document.getElementById("end-date");
    end.min = start.value;
}

function getDateRange() {
    var start = document.getElementById("start-date").value;
    var end = document.getElementById("end-date").value;

    if (start && end) {
        var endDateObj = new Date(end);
        endDateObj.setDate(endDateObj.getDate() + 1);
        var endPlusOne = endDateObj.toISOString().split('T')[0];

        var modal = bootstrap.Modal.getInstance(document.getElementById('customDateModal'));
        modal.hide();

        let url = new URL(window.location.href);
        url.searchParams.delete("num");
        url.searchParams.delete("type");
		url.searchParams.delete("export");
        url.searchParams.set("from", start);
        url.searchParams.set("to", endPlusOne);
        window.location.href = url.toString();
    } else {
        document.getElementById('errMsgDate').classList.remove('d-none');
    }
}

function exportCsv() {
	let url = new URL(window.location.href);
    url.searchParams.set("export", "true");
    window.location.href = url.toString();
}

function searchKey(event){
	if (event.key === 'Enter') {
		performSearch();
	}
}

function performSearch() {
    let input = document.getElementById("searchInput").value.trim();
    let url = new URL(window.location.href);
    
    if (input) {
        url.searchParams.set("search", input);
		url.searchParams.delete("export");
    } else {
        url.searchParams.delete("search");
		url.searchParams.delete("export");
    }
    window.location.href = url.toString();
}

function viewDetail(id) {
	let url = `/subscriber/report/salesperson/${id}?num=30&type=day`
    window.location.href = url.toString();
}

function viewDetailTrans(id) {
	let url = `/subscriber/report/salesperson/trans/${id}?num=30&type=day`
    window.location.href = url.toString();
}

function goBack() {
	let url = `/subscriber/report?num=30&type=day`
    window.location.href = url.toString();
}

function toggleDropdownAction(event, id) {
    event.preventDefault();
    event.stopPropagation();
    
    document.querySelectorAll('[id^="actionsDropdowns-"]').forEach(dropdown => {
        if (dropdown.id !== `actionsDropdowns-${id}` && !dropdown.classList.contains('d-none')) {
            dropdown.classList.add('d-none');
        }
    });
    
    const dropdown = document.getElementById(`actionsDropdowns-${id}`);
    if (dropdown) {
        dropdown.classList.toggle('d-none');
        
        if (!dropdown.classList.contains('d-none')) {
            positionDropdown(event.target, dropdown);
        }
    }
}

function positionDropdown(button, dropdown) {
    const buttonRect = button.getBoundingClientRect();
    const dropdownRect = dropdown.getBoundingClientRect();
    
    dropdown.style.top = '';
    dropdown.style.right = '';
    dropdown.style.left = '';
    
    dropdown.style.top = (buttonRect.bottom + window.scrollY + 5) + 'px';
    dropdown.style.left = (buttonRect.left + window.scrollX) + 'px';
    
    const viewportWidth = window.innerWidth;
    if (buttonRect.left + dropdownRect.width > viewportWidth) {
        dropdown.style.left = (buttonRect.right + window.scrollX - dropdownRect.width) + 'px';
    }
}

function formatCurrency(value, baseCurrency) {
    const numValue = Number(value);
    switch(baseCurrency) {
        case 'MMK':
            return `${numValue.toLocaleString()} ks`;
        case 'THB':
            return `à¸¿${numValue.toLocaleString()}`;
        case 'USD':
            return `$${numValue.toLocaleString()}`;
        default:
            return `${numValue.toLocaleString()} ${baseCurrency}`;
    }
}

function generateColorPalette(numCategories) {
    const baseColors = [
        'rgba(255, 99, 132, 0.8)', // Soft Red
        'rgba(54, 162, 235, 0.8)', // Soft Blue
        'rgba(255, 206, 86, 0.8)', // Soft Yellow
        'rgba(75, 192, 192, 0.8)', // Soft Teal
        'rgba(153, 102, 255, 0.8)', // Soft Purple
        'rgba(255, 159, 64, 0.8)', // Soft Orange
        'rgba(199, 199, 199, 0.8)', // Soft Gray
        'rgba(83, 102, 255, 0.8)', // Soft Indigo
        'rgba(40, 159, 64, 0.8)', // Soft Green
        'rgba(210, 99, 132, 0.8)' // Soft Crimson
    ];
    if (numCategories <= baseColors.length) {
        return baseColors.slice(0, numCategories);
    }
    const additionalColors = [];
    for (let i = baseColors.length; i < numCategories; i++) {
        const hue = (i * 137.508) % 360;
        const saturation = 70 + Math.sin(i) * 20;
        const lightness = 55 + Math.cos(i) * 10;
        const color = `hsla(${hue}, ${saturation}%, ${lightness}%, 0.8)`;
        additionalColors.push(color);
    }
    return [...baseColors, ...additionalColors];
}

const salesperson = <%- JSON.stringify(salesperson || []) %>;
const baseCurrency = "<%= baseCurrency %>";

const salespersonChartData = {
    labels: salesperson.map(item => {
        const name = item.name;
        return name.length > 15 ? name.substring(0, 15) + '...' : name;
    }),
    amounts: salesperson.map(item => Number(item.totalSales))
};

const ctx = document.getElementById('salespersonIncomeChart').getContext('2d');
const backgroundColor = generateColorPalette(salespersonChartData.labels.length);
const salespersonIncomeChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
        labels: salespersonChartData.labels,
        datasets: [{
            data: salespersonChartData.amounts,
            backgroundColor: backgroundColor,
            borderWidth: 2,
            borderColor: '#fff'
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom',
                labels: {
                    padding: 20,
                    usePointStyle: true,
                    font: {
                        size: 12
                    }
                }
            },
            tooltip: {
                callbacks: {
                    label: function(context) {
                        const label = context.label || '';
                        const value = context.parsed;
                        const formattedValue = formatCurrency(value, baseCurrency);
                        return `${label}: ${formattedValue}`;
                    }
                }
            }
        }
    }
});

const searchParams = new URLSearchParams(window.location.search);
const type = searchParams.get('type')
const num = searchParams.get('num')
const from = searchParams.get('from')
const to = searchParams.get('to')
const search = searchParams.get('search')
if (typeof search === 'string' && search.trim().length > 0) {
	document.getElementById('searchInput').value = search;
}
if (type === 'month') {
	if (num === '0') {
		document.getElementById('filterName').innerText = "Date"
	} else if (num === '1') {
		document.getElementById('filterName').innerText = "This Month"
	} else if (num === '3') {
		document.getElementById('filterName').innerText = "Last 3 Months"
	} else if (num === '-1') {
		document.getElementById('filterName').innerText = "Last Month"
	}
} else if (type === 'week') {
	document.getElementById('filterName').innerText = "This Week"
} else if (type === 'day') {
	if (num === '1') {
		document.getElementById('filterName').innerText = "Today"
	} else if (num === '7') {
		document.getElementById('filterName').innerText = "Last 7 Days"
	} else if (num === '30') {
		document.getElementById('filterName').innerText = "Last 30 Days"
	}
} else {
	if (from && to)
		document.getElementById('filterName').innerText = "Custom Date"
	else
		document.getElementById('filterName').innerText = "Date"
}



</script>

<%- include('../partials/subscriber/footer.ejs') %>